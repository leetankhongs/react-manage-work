{"version":3,"sources":["components/TaskForm.js","components/Search.js","components/Sort.js","components/Controll.js","components/TaskItem.js","components/TaskList.js","App.js","serviceWorker.js","index.js"],"names":["TaskForm","props","onChangeValue","event","target","name","value","setState","onSubmit","preventDefault","onSubmitData","state","onCloseForm","onExistForm","resetForm","Name","Status","ID","taskEditing","this","task","console","log","nextProps","className","onClick","type","onChange","Component","Search","searchList","txtSearch","placeholder","Sort","Type","sortBy","id","data-toggle","aria-haspopup","aria-expanded","aria-labelledby","role","Control","TaskItem","changeStatus","deleteTask","updateItem","index","TaskList","filterList","elements","taskList","map","key","App","UniqueID","Math","random","toString","substr","addTask","isDisplayForm","onShowForm","data","tasks","push","findTask","localStorage","setItem","JSON","stringify","splice","i","length","filterName","filterStatus","Filter","toLowerCase","Keyword","getItem","parse","elmTaskForm","filter","indexOf","sort","a","b","Controll","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.3c983b49.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass TaskForm extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            ID: '',\r\n            Name: '',\r\n            Status: true\r\n        }\r\n    }\r\n\r\n    componentWillMount() {\r\n        var taskEditing = this.props.task;\r\n        if (taskEditing) {\r\n            console.log(\"Vo\")\r\n            this.state = {\r\n                ID: taskEditing.ID,\r\n                Name: taskEditing.Name,\r\n                Status: taskEditing.Status\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    componentWillReceiveProps(nextProps) {\r\n        var taskEditing = nextProps.task;\r\n\r\n        if (taskEditing) {\r\n            this.state = {\r\n                ID: taskEditing.ID,\r\n                Name: taskEditing.Name,\r\n                Status: taskEditing.Status\r\n            }\r\n        } else {\r\n            this.state = {\r\n                ID: '',\r\n                Name: '',\r\n                Status: true\r\n            }\r\n        }\r\n    }\r\n    onChangeValue = (event) => {\r\n        var target = event.target;\r\n        var name = target.name;\r\n        var value = target.value;\r\n\r\n        if (name === \"Status\") {\r\n            value = target.value === \"true\" ? true : false;\r\n        }\r\n\r\n        this.setState({\r\n            [name]: value\r\n        })\r\n    }\r\n\r\n    onSubmit = (event) => {\r\n        event.preventDefault();\r\n        this.props.onSubmitData(this.state);\r\n        this.onCloseForm();\r\n    }\r\n\r\n    onCloseForm = () => {\r\n        this.props.onExistForm();\r\n    }\r\n\r\n    resetForm = () => {\r\n        this.setState({\r\n            Name: '',\r\n            Status: false\r\n        })\r\n        this.onCloseForm();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"panel panel-warning\">\r\n                <div className=\"panel-heading\">\r\n                    <h3 className=\"panel-title\">{this.state.ID === \"\" ? \"Thêm Công Việc\" : \"Chỉnh sửa công việc\"}  &nbsp;\r\n                        <span className=\"fa fa-times-circle text-right\" onClick={this.onCloseForm}></span>\r\n                    </h3>\r\n\r\n                </div>\r\n                <div className=\"panel-body\">\r\n                    <form onSubmit={this.onSubmit}>\r\n                        <div className=\"form-group\">\r\n                            <label>Tên :</label>\r\n                            <input type=\"text\"\r\n                                className=\"form-control\"\r\n                                name=\"Name\"\r\n                                onChange={this.onChangeValue}\r\n                                value={this.state.Name}\r\n                            />\r\n                        </div>\r\n                        <label>Trạng Thái :</label>\r\n                        <select className=\"form-control\"\r\n                            name=\"Status\"\r\n                            value={this.state.Status}\r\n                            onChange={this.onChangeValue}>\r\n                            <option value={true}>Kích Hoạt</option>\r\n                            <option value={false}>Ẩn</option>\r\n                        </select>\r\n                        <br />\r\n                        <div className=\"text-right\">\r\n                            <button type=\"submit\" className=\"btn btn-warning\">{this.state.ID === \"\" ? \"Thêm\" : \"Chỉnh sửa\"}</button>&nbsp;\r\n                            <button type=\"button\" className=\"btn btn-danger\" onClick={this.resetForm}>Hủy Bỏ</button>\r\n                        </div>\r\n                    </form>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default TaskForm;\r\n","import React, { Component } from 'react';\r\n\r\nclass Search extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            txtSearch: ''\r\n        }\r\n    }\r\n\r\n    onChangeValue = (event)=>{\r\n        var target = event.target;\r\n        var name = target.name;\r\n        var value = target.value;\r\n\r\n        this.setState({\r\n            [name]: value\r\n        })\r\n    }\r\n\r\n    searchList = ()=>{\r\n        this.props.searchList(this.state.txtSearch);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"input-group\">\r\n                <input type=\"text\" className=\"form-control\" placeholder=\"Nhập từ khóa...\" value = {this.state.txtSearch} Name = \"txtSearch\" onChange = {this.onChangeValue}/>\r\n                <span className=\"input-group-btn\">\r\n                    <button className=\"btn btn-primary\" type=\"button\" onClick = {this.searchList}>\r\n                        <span className=\"fa fa-search mr-5\"></span>&nbsp;Tìm\r\n                                </button>\r\n                </span>\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default Search;\r\n","import React, { Component } from 'react';\r\nimport '../App.css'\r\n\r\nclass Sort extends Component {\r\n    \r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            Type: 0\r\n        }\r\n    }\r\n\r\n    onClick = (type) =>{\r\n        this.setState({\r\n            Type: type\r\n        })\r\n\r\n        this.props.sortBy(type);\r\n    }\r\n    \r\n\r\n    render() {\r\n        return (\r\n            <div className=\"dropdown\">\r\n                <button className=\"btn btn-primary dropdown-toggle\" type=\"button\" id=\"dropdownMenu1\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"true\">\r\n                    Sắp Xếp &nbsp; <span className=\"fa fa-caret-square-o-down ml-5\"></span>\r\n                </button>\r\n                <ul className=\"dropdown-menu\" aria-labelledby=\"dropdownMenu1\">\r\n                    <li>\r\n                        <a role=\"button\" className={this.state.Type === 0?\"sort_selected\" : \"\"} onClick = {()=>this.onClick(0)}>\r\n                            <span >\r\n                                Null\r\n                                                    </span>\r\n                        </a>\r\n                    </li>\r\n                    <li>\r\n                        <a role=\"button\" className={this.state.Type === 1?\"sort_selected\" : \"\" } onClick = {()=>this.onClick(1)}>\r\n                            <span className=\"fa fa-sort-alpha-asc pr-5\">\r\n                                Tên A-Z\r\n                                                    </span>\r\n                        </a>\r\n                    </li>\r\n                    <li>\r\n                        <a role=\"button\" className={this.state.Type === -1?\"sort_selected\" : \"\"} onClick = {()=>this.onClick(-1)}>\r\n                            <span className=\"fa fa-sort-alpha-desc pr-5\">\r\n                                Tên Z-A\r\n                                                    </span>\r\n                        </a>\r\n                    </li>\r\n                </ul>\r\n            </div>\r\n\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default Sort;\r\n","import React, { Component } from 'react';\r\nimport Search from './Search';\r\nimport Sort from './Sort';\r\nclass Control extends Component {\r\n\r\n    searchList = (txtSearch)=>{\r\n        this.props.searchList(txtSearch);\r\n    }\r\n\r\n    sortBy = (type) =>{\r\n        this.props.sortBy(type)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div className=\"col-xs-6 col-sm-6 col-md-6 col-lg-6\">\r\n                    <Search searchList = {this.searchList}/>\r\n                </div>\r\n                <div className=\"col-xs-6 col-sm-6 col-md-6 col-lg-6\">\r\n                    <Sort sortBy = {this.sortBy}/>\r\n                </div>\r\n            </div>\r\n\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default Control;\r\n","import React, { Component } from 'react';\r\n\r\nclass TaskItem extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n    }\r\n\r\n    changeStatus = () => {\r\n        this.props.changeStatus(this.props.task.ID);\r\n    }\r\n\r\n    deleteTask = () => {\r\n        this.props.deleteTask(this.props.task.ID);\r\n    }\r\n\r\n    updateItem = () =>{\r\n        this.props.updateItem(this.props.task.ID);\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <tr>\r\n                <td>{this.props.index + 1}</td>\r\n                <td>{this.props.task.Name}</td>\r\n                <td className=\"text-center\">\r\n\r\n                    <span className={this.props.task.Status === true ? \"label label-danger\" : \"label label-success\"} onClick={this.changeStatus}>\r\n                        {this.props.task.Status === true ? \"Kích hoạt\" : \"Ẩn\"}\r\n                    </span>\r\n                </td>\r\n                <td className=\"text-center\">\r\n                    <button type=\"button\" className=\"btn btn-warning\" onClick = {this.updateItem}>\r\n                        <span className=\"fa fa-pencil mr-5\"></span>&nbsp;Sửa\r\n                                            </button>\r\n                                            &nbsp;\r\n                                            <button type=\"button\" className=\"btn btn-danger\" onClick={this.deleteTask}>\r\n                        <span className=\"fa fa-trash mr-5\"></span>&nbsp;Xóa\r\n                                            </button>\r\n                </td>\r\n            </tr>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default TaskItem;\r\n","import React, { Component } from 'react';\r\nimport TaskItem from './TaskItem'\r\nimport '../App.css';\r\nclass TaskList extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            Name: '',\r\n            Status: -1\r\n        }\r\n    }\r\n\r\n    changeStatus = (ID) =>{\r\n        this.props.changeStatus(ID);\r\n    }\r\n\r\n    deleteTask = (ID) => {\r\n        this.props.deleteTask(ID);\r\n    }\r\n\r\n    updateItem = (ID) =>{\r\n        this.props.updateItem(ID);\r\n    }\r\n    \r\n    onChangeValue = (event)=>{\r\n        var target = event.target;\r\n        var name = target.name;\r\n        var value = target.value;\r\n        \r\n        this.props.filterList(name === \"Name\"? value : this.state.Name, name === \"Status\"? value : this.state.Status)\r\n\r\n        this.setState({\r\n            [name]: value\r\n        })\r\n\r\n        \r\n    }\r\n    render() {\r\n\r\n        var elements = this.props.taskList.map((task, index) => {\r\n            return <TaskItem key = {index} task = {task} index = {index}\r\n                    changeStatus = {this.changeStatus}\r\n                    deleteTask = {this.deleteTask}\r\n                    updateItem = {this.updateItem}/>\r\n        })\r\n        return (\r\n            <table className=\"table table-bordered table-hover mt-15\">\r\n                <thead>\r\n                    <tr>\r\n                        <th className=\"text-center\">STT</th>\r\n                        <th className=\"text-center\">Tên</th>\r\n                        <th className=\"text-center\">Trạng Thái</th>\r\n                        <th className=\"text-center\">Hành Động</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    <tr>\r\n                        <td></td>\r\n                        <td>\r\n                            <input type=\"text\" className=\"form-control\" name = \"Name\" onChange = {this.onChangeValue} value = {this.state.Name}/>\r\n                        </td>\r\n                        <td>\r\n                            <select className=\"form-control\" name = \"Status\" onChange = {this.onChangeValue} value = {this.state.Status}>\r\n                                <option value={-1}>Tất Cả</option>\r\n                                <option value={0}>Ẩn</option>\r\n                                <option value={1}>Kích Hoạt</option>\r\n                            </select>\r\n                        </td>\r\n                        <td></td>\r\n                    </tr>\r\n                    \r\n                    {elements}\r\n                </tbody>\r\n            </table>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default TaskList;\r\n","import React, { Component } from 'react';\nimport './App.css'\nimport TaskForm from './components/TaskForm'\nimport Controll from './components/Controll'\nimport TaskList from './components/TaskList'\nclass App extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            tasks: [],\n            isDisplayForm: false,\n            taskEditing: null,\n            Filter: {\n                Name: '',\n                Status: -1\n            },\n            Keyword: '',\n            Sort: 0\n        };\n    }\n\n    componentWillMount() {\n        if (localStorage && localStorage.getItem(\"tasks\")) {\n            var tasks = JSON.parse(localStorage.getItem(\"tasks\"))\n            this.setState({\n                tasks: tasks\n            })\n        }\n    }\n\n    UniqueID = () => {\n        return '_' + Math.random().toString(36).substr(2, 9);\n    }\n\n    addTask = () => {\n    \n        if(this.state.taskEditing){\n            this.setState({\n                isDisplayForm: true,\n                taskEditing: null\n            })\n        }else{\n            this.setState({\n                isDisplayForm: !this.state.isDisplayForm\n            })\n        }\n        \n    }\n    onExistForm = () => {\n        this.setState({\n            isDisplayForm: false,\n            taskEditing: null\n        })\n    }\n\n    onShowForm = () => {\n        this.setState({\n            isDisplayForm: true\n        })\n    }\n\n    onSubmitData = (data) => {\n        var { tasks } = this.state;\n\n        if (data.ID === \"\") {\n            var task = {\n                ID: this.UniqueID(),\n                Name: data.Name,\n                Status: data.Status\n            }\n\n            tasks.push(task);\n        } else {\n            var index = this.findTask(data.ID);\n\n            if (index !== -1) {\n                tasks[index] = data;\n            }\n        }\n\n        this.setState({\n            tasks: tasks\n        })\n        localStorage.setItem(\"tasks\", JSON.stringify(tasks));\n    }\n\n    changeStatus = (ID) => {\n        var { tasks } = this.state;\n\n        var index = this.findTask(ID);\n\n        if (index !== -1) {\n            tasks[index].Status = !tasks[index].Status;\n            this.setState({\n                tasks: tasks\n            })\n\n            localStorage.setItem(\"tasks\", JSON.stringify(tasks));\n        }\n\n    }\n\n    deleteTask = (ID) => {\n        var { tasks } = this.state;\n\n        var index = this.findTask(ID);\n\n        if (index !== -1) {\n            tasks.splice(index, 1);\n            this.setState({\n                tasks: tasks\n            })\n\n            localStorage.setItem(\"tasks\", JSON.stringify(tasks));\n        }\n    }\n\n    findTask = (ID) => {\n        var { tasks } = this.state;\n\n        var index = -1;\n        for (var i = 0; i < tasks.length; i++) {\n            if (tasks[i].ID === ID) {\n                index = i;\n                break;\n            }\n        }\n\n        return index;\n    }\n\n    updateItem = (ID) => {\n        var { tasks } = this.state;\n\n        var index = this.findTask(ID);\n\n        if (index !== -1) {\n            this.setState({\n                taskEditing: tasks[index]\n            })\n\n            this.onShowForm();\n\n            localStorage.setItem(\"tasks\", JSON.stringify(tasks));\n        }\n    }\n\n    filterList = (filterName, filterStatus)=>{\n        this.setState({\n            Filter: {\n                Name: filterName.toLowerCase(),\n                Status: filterStatus\n            }\n        })\n\n    }\n\n    searchList = (txtSearch)=>{\n        this.setState({\n            Keyword: txtSearch\n        })\n    }\n\n    sortBy = (type) =>{\n        this.setState({\n            Sort: type\n        })\n    }\n\n    render() {\n        var { tasks, isDisplayForm, Filter, Keyword, Sort } = this.state;\n\n        var elmTaskForm = isDisplayForm === true ? <TaskForm onExistForm={this.onExistForm}\n            onSubmitData={this.onSubmitData}\n            task={this.state.taskEditing} /> : '';\n        if(Filter){\n            tasks = tasks.filter((task)=>{\n                return task.Name.toLowerCase().indexOf(Filter.Name) !== -1;\n            })\n            console.log(tasks)\n            tasks = tasks.filter((task)=>{\n                if(Filter.Status == -1)\n                {\n                    return task;\n                }\n                else{\n                    return task.Status === (Filter.Status == 1? true: false);\n                }\n            })\n        }\n\n        if(Keyword !== \"\"){\n            tasks = tasks.filter((task)=>{\n                return task.Name.toLowerCase().indexOf(Keyword) !== -1;\n            })\n        }\n\n        if(Sort !== 0){\n            tasks.sort((a,b)=>{\n                if(a.Name.toLowerCase() > b.Name.toLowerCase()) return Sort;\n                else if(a.Name.toLowerCase() < b.Name.toLowerCase()) return -Sort;\n                else return 0;\n            })\n        }\n        \n        return (\n            <div className=\"container\">\n                <div className=\"text-center\">\n                    <h1>Quản Lý Công Việc</h1>\n                    <hr />\n                </div>\n                <div className=\"row\">\n                    <div className={isDisplayForm === true ? \"col-xs-4 col-sm-4 col-md-4 col-lg-4\" : \"\"}>\n                        {elmTaskForm}\n                    </div>\n                    <div className={isDisplayForm === true ? \"col-xs-8 col-sm-8 col-md-8 col-lg-8\" : \"col-xs-12 col-sm-12 col-md-12 col-lg-12\"}>\n                        <button type=\"button\" className=\"btn btn-primary\" onClick={this.addTask}>\n                            <span className=\"fa fa-plus mr-5\"></span>&nbsp;Thêm Công Việc\n                        </button>&nbsp;\n                        <div className=\"row mt-15\">\n                            <Controll searchList = {this.searchList} sortBy = {this.sortBy}/>\n                        </div>\n                        <div className=\"row mt-15\">\n                            <div className=\"col-xs-12 col-sm-12 col-md-12 col-lg-12\">\n                                <TaskList taskList={tasks}\n                                    changeStatus={this.changeStatus}\n                                    deleteTask={this.deleteTask}\n                                    updateItem={this.updateItem} \n                                    filterList={this.filterList}/>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}